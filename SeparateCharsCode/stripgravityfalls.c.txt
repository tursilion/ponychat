// dummy.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <atomic>
#include <iostream>
#include <atlstr.h>


void emitlines(FILE *fout, char *p) {
    static int line = 0;

    // now we have one character phrase
    if (strlen(p) > 3) {
        // process into separate lines
        while (*p) {
            char out[8192];
            while ((*p)&&(*p <= ' ')) ++p;
            memset(out, 0, sizeof(out));
            char *pout = out;
            // if it /starts/ with an elipsis, keep that
            if ((*p=='.')&&(*(p+1)=='.')&&(*(p+2)=='.')) {
                strcpy(out,"...");
                pout+=3;
                p+=3;
            }
            // find the end of the current sentence
            char *pend = strpbrk(p, "].!?");
            if (NULL == pend) {
                pend=strchr(p, '\0');
            } else if (*(pend+1)==')') ++pend;
            memcpy(pout, p, pend-p+1);
            if (*pend == '.') {
                // check for elipsis
                while (*(++pend) == '.') strcat(out, ".");
                --pend;
            }
            if (*pend != '\0') ++pend;
            // make sure there's no line ending in there still...
            char *x = strchr(out, '\0');
            --x;
            while (*x <= ' ') --x;
            ++x; 
            *x = '\0';
            // and strip out quotes, they interfere more often than not
            for (;;) {
                x = strchr(out, '\"');
                if (NULL == x) break;
                memmove(x, x+1, strlen(x));
            }
            // and double spaces
            for (;;) {
                x = strstr(out, "  ");
                if (NULL == x) break;
                memmove(x, x+1, strlen(x));
            }
            if (strlen(out) > 3) {
                fprintf(fout, "%s\n", out);
            }
            // insert space before --
            p = out;
            for (;;) {
                x = (char*)strstr(p, "--");
                if (NULL == x) break;
                if ((x>out)&&(*(x-1)!= ' ')) {
                    memmove(x+1, x, strlen(x)+1);
                    *x = ' ';
                }
                p=x+3;
            }
            p=pend;
        }
        ++line;
        if (line%100 == 0) printf("\r%d...", line);
    }
}

void fixName(char *buf) {
    // fix up case, and remove spaces
    char *p = buf;
    _strlwr(buf);
    buf[0]=toupper(buf[0]);
    while (*buf) {
        if (*buf == ' ') {
            // remove space and uppercase the letter
            memmove(buf, buf+1, strlen(buf));
            *buf = toupper(*buf);
        } else if ((*buf < 0) || (!isalnum(*buf))) {
            // just remove it
            memmove(buf, buf+1, strlen(buf));
        } else {
            ++buf;
        }
    }
    // some special cases
    if (0 == strncmp(p, "Dipper", 6)) {
        strcpy(p, "Dipper");
    }
    if (0 == strncmp(p, "Number", 6)) {
        strcpy(p, "Dipper");
    }
    if (0 == strncmp(p, "Mabel", 5)) {
        strcpy(p, "Mabel");
    }
}

void processString(char *buf) {
    // inplace clean up formatting - remove italics and clean up links
    char *p = buf;
    while (*p) {
        if ((*p == '\'') && (*(p+1) == '\'')) {
            if (*(p+2) == '(') {
                // start double quoted italics parentheses. Remove until end.
                char *start = p;
                p+=2;
                while ((*p)&&((*p != '\'') || (*(p+1) != '\''))) ++p;
                if (*p != '\'') {
                    // no end of quote, empty string
                    buf[0]='\0';
                    return;
                }
                memmove(start, p+2, strlen(p+2)+1);
                p=start;
                continue;
            } else {
                // just remove the italics markdown. Reparse what was inside
                char *start = p;
                memmove(p, p+2, strlen(p+2)+1);
                // find the end
                while ((*p)&&((*p != '\'') || (*(p+1) != '\''))) ++p;
                if (*p != '\'') {
                    memmove(p, p+2, strlen(p+2)+1);
                }
                p = start;
                continue; 
            }
        }
        if ((*p == '[') && (*(p+1) == '[')) {
            // patch up links - if there's a |, we have to take the last block
            char *start = p;
            char *now = p;
            p+=2;
            while ((*p)&&((*p != ']') || (*(p+1) != ']'))) {
                if (*p == '|') {
                    // start copying over
                    now = start;
                    ++p;
                    continue;
                }
                *(now++) = *(p++);
            }
            if (*p == ']') {
                memmove(now, p+2, strlen(p+2)+1);
            }
            p=start;
            continue;
        }
        // else we don't care
        ++p;
    }

    // trim beginning (including pipe)
    while ((*buf)&&((*buf <= ' ')||(*buf == '|'))) memcpy(buf, buf+1, strlen(buf));

    // trim end
    p=buf+strlen(buf)-1;
    while ((p>buf)&&(*p <= ' ')) {
        *(p--) = '\0';
    }
}

void parseText(char *fn) {
    // extra script text for bibo scripts
    // right now: gravity falls logs (copy from edit dialog)
    // https://gravityfalls.fandom.com/wiki/Tourist_Trapped/Transcript
    FILE *fin = fopen(fn, "r");
    if (NULL == fin) {
        printf("can't open '%s'\n", fn);
        return;
    }

    char buf[4096];

    while (!feof(fin)) {
        // find start of transcript box
        if (NULL == fgets(buf, sizeof(buf), fin)) {
            printf("EOF looking for start\n");
            return;
        }
        if (0 == strncmp(buf, "{{Transcript", 12)) break;
    }

    // now process
search:
    while (!feof(fin)) {
        if (NULL == fgets(buf, sizeof(buf), fin)) {
            printf("EOF looking for new speaker\n");
            return;
        }
        if (0 == strncmp(buf, "|-", 2)) break;
//        if (0 == strncmp(buf, "|}", 2)) {
//            printf("End of data\n");
//            return;
//        }
    }

found:
    // next line should be a name
    char name[1024];
    if (NULL == fgets(buf, sizeof(buf), fin)) {
        printf("EOF getting name\n");
        return;
    }
    if (buf[0] != '!') {
        printf("Didn't get a name...\n");
        goto search;
    }
    processString(buf);
    strcpy(name, buf+1);

    // Don't bother to capture groups or arbitrary or empty!
    if (name[0] == '\0') goto search;
    if (NULL != strstr(name, " and ")) goto search;
    if (NULL != strstr(name, "&")) goto search;
    if (NULL != strstr(name, " in ")) goto search;
    if (NULL != strstr(name, " except ")) goto search;
    if (NULL != strstr(name, " in ")) goto search;
    if (NULL != strstr(name, "Unnamed ")) goto search;

    // now grab lines until the end. Minimum length.
    for (;;) {
        if (NULL == fgets(buf, sizeof(buf), fin)) {
            printf("EOF processing lines.\n");
            return;
        }
        if (buf[0] != '|') continue;
        if (0 == strncmp(buf, "|-", 2)) goto found; // the blocks run together
//        if (0 == strncmp(buf, "|}", 2)) {
//            printf("End of data\n");
//            return;
//        }

        processString(buf);

        if (strlen(buf) > 6) {
            char outname[1024];
            fixName(name);
            sprintf(outname, "gf\\%s.txt", name);
            FILE *out = fopen(outname, "a");
            if (NULL != out) {
                emitlines(out, buf);
                fclose(out);
            } else {
                printf("Failed to open '%s\n", name);
                return;
            }
        }
    }
}


int main(int argc, char *argv[])
{

    parseText(argv[1]);


    return 0;
}

